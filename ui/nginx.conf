server {
  listen 80;
  server_name _;
  # Use Docker DNS for dynamic name resolution (enables startup without RabbitMQ present)
  resolver 127.0.0.11 ipv6=off valid=30s;

  # Serve static UI
  root /usr/share/nginx/html;
  index index.html;

  # Simple liveness/health endpoint for container and reverse proxy
  location = /healthz {
    add_header Content-Type text/plain;
    return 200 'ok';
  }

  # Proxy WebSocket to RabbitMQ Web-STOMP
  location /ws {
    # Defer DNS by using variable + resolver; if RabbitMQ is not up, requests will 502 but Nginx will start
    set $rmq_host rabbitmq;
    proxy_pass http://$rmq_host:15674/ws;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_read_timeout 600s;
  }

  # Basic caching for static assets
  location ~* \.(js|css|png|svg|jpg|jpeg|gif|ico)$ {
    try_files $uri =404;
    add_header Cache-Control "public, max-age=3600";
  }

  # Compatibility: map /ui/* paths (as used in README) to docroot
  # Use ^~ to prefer this prefix over regex static handler below
  location ^~ /ui/ {
    alias /usr/share/nginx/html/;
    try_files $uri $uri/ =404;
  }
}
