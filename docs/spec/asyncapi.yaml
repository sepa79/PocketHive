asyncapi: 2.6.0
info:
  title: PocketHive Control & Traffic API
  version: 0.5.0
  description: "AsyncAPI specification documenting PocketHive messaging contracts.\n\
    - ph.control \u2014 swarm-aware control plane covering signals, confirmations, lifecycle, metrics, and alerts.\n\
    - Control signals publish with routing keys `sig.<signal>.<swarm>.<role>.<instance>` and confirmations/events reply on `ev.<type>.<swarm>.<role>.<instance>`.\n\
    - ph.{swarmId}.hive \u2014 traffic exchange for workload messages (generator \u2192 moderator \u2192 processor).\n"
servers:
  control-ws:
    url: ws://{host}/ws
    protocol: stomp
    description: Web-STOMP endpoint proxied by UI (use wss on HTTPS)
    variables:
      host:
        default: localhost:8088
  amqp:
    url: amqp://{host}:{port}
    protocol: amqp
    variables:
      host:
        default: rabbitmq
      port:
        default: '5672'
defaultContentType: application/json
channels:
  exchange/ph.control/sig.{signal}.{swarm}.{role}.{instance}:
    parameters:
      signal:
        description: Control signal identifier (kebab-case)
        schema:
          type: string
          enum:
          - swarm-template
          - swarm-start
          - swarm-stop
          - swarm-remove
          - config-update
          - status-request
      swarm:
        description: Target swarm identifier or ALL for global broadcasts
        schema:
          type: string
      role:
        description: Target role or ALL when broadcasting to every role within a swarm
        schema:
          type: string
          enum:
          - ALL
          - orchestrator
          - swarm-controller
          - generator
          - moderator
          - processor
          - postprocessor
          - trigger
      instance:
        description: Target instance identifier or ALL for role-wide commands
        schema:
          type: string
    publish:
      summary: PocketHive control-plane signals published to swarms, roles, or instances
      message:
        $ref: '#/components/messages/ControlSignal'
    bindings:
      amqp:
        is: routingKey
        exchange:
          name: ph.control
          type: topic
          durable: true
        routingKey: sig.{signal}.{swarm}.{role}.{instance}
  exchange/ph.control/ev.ready.{event}.{swarm}.{role}.{instance}:
    parameters:
      event:
        description: Control action that completed successfully
        schema:
          type: string
          enum:
          - swarm-create
          - swarm-template
          - swarm-start
          - swarm-stop
          - swarm-remove
          - config-update
          - status-request
          - swarm-controller
      swarm:
        description: Swarm context for the confirmation or ALL for global actions
        schema:
          type: string
      role:
        description: Role affected by the action (use ALL when reporting swarm-wide success)
        schema:
          type: string
          enum:
          - ALL
          - orchestrator
          - swarm-controller
          - generator
          - moderator
          - processor
          - postprocessor
          - trigger
      instance:
        description: Specific instance that completed the command or ALL for fan-outs
        schema:
          type: string
    subscribe:
      summary: Success confirmations emitted for control-plane commands
      message:
        $ref: '#/components/messages/CommandReady'
    bindings:
      amqp:
        is: routingKey
        exchange:
          name: ph.control
          type: topic
          durable: true
        routingKey: ev.ready.{event}.{swarm}.{role}.{instance}
  exchange/ph.control/ev.error.{event}.{swarm}.{role}.{instance}:
    parameters:
      event:
        description: Control action that failed
        schema:
          type: string
          enum:
          - swarm-create
          - swarm-template
          - swarm-start
          - swarm-stop
          - swarm-remove
          - config-update
          - status-request
          - swarm-controller
      swarm:
        description: Swarm context for the failure or ALL for global actions
        schema:
          type: string
      role:
        description: Role affected by the failure (use ALL when reporting swarm-wide failure)
        schema:
          type: string
          enum:
          - ALL
          - orchestrator
          - swarm-controller
          - generator
          - moderator
          - processor
          - postprocessor
          - trigger
      instance:
        description: Specific instance that failed or ALL for fan-outs
        schema:
          type: string
    subscribe:
      summary: Error confirmations emitted for control-plane commands
      message:
        $ref: '#/components/messages/CommandError'
    bindings:
      amqp:
        is: routingKey
        exchange:
          name: ph.control
          type: topic
          durable: true
        routingKey: ev.error.{event}.{swarm}.{role}.{instance}
  exchange/ph.control/ev.status-{kind}.{swarm}.{role}.{instance}:
    parameters:
      kind:
        description: Status document variant
        schema:
          type: string
          enum:
          - full
          - delta
      swarm:
        description: Swarm that produced the status payload
        schema:
          type: string
      role:
        description: Role emitting the status event
        schema:
          type: string
          enum:
          - orchestrator
          - swarm-controller
          - generator
          - moderator
          - processor
          - postprocessor
          - trigger
      instance:
        description: Instance emitting the status event
        schema:
          type: string
    subscribe:
      summary: PocketHive control-plane status events from controllers and workers
      message:
        oneOf:
        - $ref: '#/components/messages/ControlStatusFull'
        - $ref: '#/components/messages/ControlStatusDelta'
    bindings:
      amqp:
        is: routingKey
        exchange:
          name: ph.control
          type: topic
          durable: true
        routingKey: ev.status-{kind}.{swarm}.{role}.{instance}
  exchange/ph.control/ev.lifecycle.{swarm}.{role}.{instance}:
    parameters:
      swarm:
        description: Swarm associated with the lifecycle update
        schema:
          type: string
      role:
        description: Role emitting lifecycle milestones
        schema:
          type: string
          enum:
          - swarm-controller
          - generator
          - moderator
          - processor
          - postprocessor
          - trigger
      instance:
        description: Instance emitting the lifecycle milestone
        schema:
          type: string
    subscribe:
      summary: Component and controller lifecycle milestones
      message:
        $ref: '#/components/messages/ControlLifecycle'
    bindings:
      amqp:
        is: routingKey
        exchange:
          name: ph.control
          type: topic
          durable: true
        routingKey: ev.lifecycle.{swarm}.{role}.{instance}
  exchange/ph.control/ev.metric.{swarm}.{role}.{instance}:
    parameters:
      swarm:
        description: Swarm emitting the metric sample
        schema:
          type: string
      role:
        description: Role emitting metric samples
        schema:
          type: string
          enum:
          - swarm-controller
          - generator
          - moderator
          - processor
          - postprocessor
          - trigger
      instance:
        description: Instance emitting metric samples
        schema:
          type: string
    subscribe:
      summary: Metric streams from controllers and workers
      message:
        $ref: '#/components/messages/ControlMetric'
    bindings:
      amqp:
        is: routingKey
        exchange:
          name: ph.control
          type: topic
          durable: true
        routingKey: ev.metric.{swarm}.{role}.{instance}
  exchange/ph.control/ev.alert.{swarm}.{role}.{instance}:
    parameters:
      swarm:
        description: Swarm emitting the alert
        schema:
          type: string
      role:
        description: Role emitting alerts
        schema:
          type: string
          enum:
          - orchestrator
          - swarm-controller
          - generator
          - moderator
          - processor
          - postprocessor
          - trigger
      instance:
        description: Instance emitting alerts
        schema:
          type: string
    subscribe:
      summary: Alert notifications emitted across the control plane
      message:
        $ref: '#/components/messages/ControlAlert'
    bindings:
      amqp:
        is: routingKey
        exchange:
          name: ph.control
          type: topic
          durable: true
        routingKey: ev.alert.{swarm}.{role}.{instance}
components:
  messages:
    ControlStatusFull:
      name: ControlStatusFull
      title: "Control \u2014 Status (full snapshot)"
      contentType: application/json
      payload:
        $ref: '#/components/schemas/ControlStatusFullPayload'
    ControlStatusDelta:
      name: ControlStatusDelta
      title: "Control \u2014 Status (delta)"
      contentType: application/json
      payload:
        $ref: '#/components/schemas/ControlStatusDeltaPayload'
    ControlLifecycle:
      name: ControlLifecycle
      title: "Control \u2014 Lifecycle"
      contentType: application/json
      payload:
        $ref: '#/components/schemas/ControlLifecyclePayload'
    ControlMetric:
      name: ControlMetric
      title: "Control \u2014 Metric"
      contentType: application/json
      payload:
        $ref: '#/components/schemas/ControlMetricPayload'
    ControlAlert:
      name: ControlAlert
      title: "Control \u2014 Alert"
      contentType: application/json
      payload:
        $ref: '#/components/schemas/ControlAlertPayload'
    ControlSignal:
      name: ControlSignal
      contentType: application/json
      payload:
        $ref: '#/components/schemas/ControlSignalPayload'
    ErrorMessage:
      name: ErrorMessage
      title: Error description
      contentType: text/plain
      payload:
        type: string
        description: Brief error message
    SwarmCreate:
      name: SwarmCreate
      title: Swarm creation request
      payload:
        type: object
        required:
        - templateId
        properties:
          templateId:
            type: string
    SwarmPlanMessage:
      name: SwarmPlan
      title: Resolved swarm plan
      payload:
        type: object
        required:
        - id
        - bees
        properties:
          id:
            type: string
          bees:
            type: array
            items:
              type: object
              required:
              - role
              - image
              properties:
                role:
                  type: string
                image:
                  type: string
                enabled:
                  type: boolean
    SwarmStart:
      name: SwarmStart
      title: Swarm start signal
      payload:
        type: object
        description: Empty object
    CommandReady:
      name: CommandReady
      contentType: application/json
      payload:
        $ref: '#/components/schemas/CommandReadyPayload'
    CommandError:
      name: CommandError
      contentType: application/json
      payload:
        $ref: '#/components/schemas/CommandErrorPayload'
  schemas:
    ControlBase:
      type: object
      required:
      - event
      - kind
      - version
      - role
      - instance
      - messageId
      - timestamp
      properties:
        event:
          type: string
          enum:
          - status
          - lifecycle
          - metric
          - alert
          - link
        kind:
          type: string
          description: Subtype (e.g.
          status-full: null
          status-delta: null
          lifecycle.running): null
        version:
          type: string
          description: Semver of event schema
        role:
          type: string
          enum:
          - generator
          - moderator
          - processor
          - postprocessor
          - trigger
          - swarm-controller
          - orchestrator
        instance:
          type: string
        location:
          type: string
        messageId:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time
        enabled:
          type: boolean
        traffic:
          type: string
        inQueue:
          type: object
          properties:
            name:
              type: string
            routingKeys:
              type: array
              items:
                type: string
        publishes:
          type: array
          items:
            type: string
        queues:
          type: object
          properties:
            work:
              type: object
              properties:
                in:
                  type: array
                  items:
                    type: string
                out:
                  type: array
                  items:
                    type: string
                routes:
                  type: array
                  items:
                    type: string
            control:
              type: object
              properties:
                in:
                  type: array
                  items:
                    type: string
                out:
                  type: array
                  items:
                    type: string
                routes:
                  type: array
                  items:
                    type: string
        data:
          type: object
          additionalProperties: true
    ControlStatusFullPayload:
      allOf:
      - $ref: '#/components/schemas/ControlBase'
      - type: object
        properties:
          event:
            const: status
          kind:
            const: status-full
          data:
            type: object
            required:
            - tps
            properties:
              tps:
                type: integer
                minimum: 0
    ControlStatusDeltaPayload:
      allOf:
      - $ref: '#/components/schemas/ControlBase'
      - type: object
        properties:
          event:
            const: status
          kind:
            const: status-delta
          data:
            type: object
            required:
            - tps
            properties:
              tps:
                type: integer
                minimum: 0
    ControlLifecyclePayload:
      allOf:
      - $ref: '#/components/schemas/ControlBase'
      - type: object
        properties:
          event:
            const: lifecycle
          data:
            type: object
            required:
            - state
            properties:
              state:
                type: string
                enum:
                - starting
                - running
                - degraded
                - stopping
                - stopped
                - error
              reason:
                type: string
    ControlMetricPayload:
      allOf:
      - $ref: '#/components/schemas/ControlBase'
      - type: object
        properties:
          event:
            const: metric
          data:
            type: object
            additionalProperties:
              type: number
    ControlAlertPayload:
      allOf:
      - $ref: '#/components/schemas/ControlBase'
      - type: object
        properties:
          event:
            const: alert
          data:
            type: object
            required:
            - level
            - code
            - message
            properties:
              level:
                type: string
                enum:
                - info
                - warn
                - error
              code:
                type: string
              message:
                type: string
    ControlSignalPayload:
      type: object
      required:
      - signal
      - correlationId
      - idempotencyKey
      - swarmId
      - role
      - instance
      - commandTarget
      properties:
        signal:
          type: string
          description: Command identifier (e.g., swarm-start, config-update)
        correlationId:
          type: string
          description: Correlates confirmations with the initiating attempt
        idempotencyKey:
          type: string
          description: Stable identifier reused across retries of the same action
        swarmId:
          type: string
          description: Target swarm identifier; use ALL for cross-swarm broadcasts
        role:
          type: string
          description: Target service role; use ALL when addressing every role within a swarm
        instance:
          type: string
          description: Target instance identifier; use ALL for role-wide commands
        commandTarget:
          type: string
          description: High-level target classification that guides routing decisions
          enum:
          - all
          - swarm
          - role
          - instance
        target:
          type: string
          description: Optional semantic label for the resolved target (e.g., swarm, controller, generator)
        args:
          type: object
          description: Additional arguments specific to the signal
          additionalProperties: true
    CommandReadyPayload:
      type: object
      properties:
        ts:
          type: string
          format: date-time
        correlationId:
          type: string
          format: uuid
        idempotencyKey:
          type: string
          format: uuid
        signal:
          type: string
        scope:
          $ref: '#/components/schemas/ConfirmationScope'
        result:
          type: string
          enum:
          - success
        state:
          $ref: '#/components/schemas/CommandState'
        notes:
          type: string
      required:
      - ts
      - correlationId
      - idempotencyKey
      - signal
      - result
    CommandErrorPayload:
      type: object
      properties:
        ts:
          type: string
          format: date-time
        correlationId:
          type: string
          format: uuid
        idempotencyKey:
          type: string
          format: uuid
        signal:
          type: string
        scope:
          $ref: '#/components/schemas/ConfirmationScope'
        result:
          type: string
          enum:
          - error
        phase:
          type: string
        code:
          type: string
        message:
          type: string
        state:
          $ref: '#/components/schemas/CommandState'
        retryable:
          type: boolean
        details:
          type: object
          additionalProperties: true
      required:
      - ts
      - correlationId
      - idempotencyKey
      - signal
      - result
      - code
      - message
    ConfirmationScope:
      type: object
      description: Scope tuple describing the swarm, role, and instance affected by a command
      additionalProperties: false
      properties:
        swarmId:
          type: string
        role:
          type: string
        instance:
          type: string
    CommandState:
      type: object
      additionalProperties: false
      properties:
        status:
          type: string
          description: Primary lifecycle status after processing the command
        scope:
          $ref: '#/components/schemas/ConfirmationScope'
        target:
          type: string
          description: Optional target label corresponding to the command effect
        enabled:
          type: boolean
          description: Primary enablement flag for the target
        details:
          type: object
          description: Optional structured state map (e.g., workloads.enabled, controller.enabled)
          additionalProperties: true
