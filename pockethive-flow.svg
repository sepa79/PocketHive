<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1280 760" width="1280" height="760">
  <title>PocketHive — Processing Flow (v2)</title>
  <desc>Generator → Queue → Moderator → Queue → Processor → PostProcessor ↔ Test Environment.</desc>
  <defs>
    <style><![CDATA[
      :root {
        --amber: #FFC107;
        --amber-200: #FFE082;
        --amber-50: #FFF8E1;
        --ink: #1e1e1e;
        --grid: #e9e9e9;
        --muted: #6b6b6b;
      }
      .grid line { stroke: var(--grid); stroke-width: 1; }
      .node { fill: white; stroke: var(--amber); stroke-width: 3; rx: 16; }
      .node-title { font: 700 22px/1.2 "Inter", "Segoe UI", Arial, sans-serif; fill: var(--ink); }
      .sub { font: 400 14px/1.4 "Inter", "Segoe UI", Arial, sans-serif; fill: var(--muted); }
      .title { font: 800 36px/1 "Inter", "Segoe UI", Arial, sans-serif; fill: var(--ink); letter-spacing: 0.2px; }
      .tag { font: 600 14px/1 "Inter", "Segoe UI", Arial, sans-serif; fill: var(--ink); }
      .badge { fill: var(--amber-50); stroke: var(--amber); stroke-width: 2; rx: 10; }
      .arrow { stroke: var(--amber); stroke-width: 3; fill: none; }
      .arrow.dashed { stroke-dasharray: 8 8; }
      .note { font: 12px "Inter", "Segoe UI", Arial, sans-serif; fill: var(--muted); }
      .hex-stroke { fill: none; stroke: var(--amber); stroke-width: 6; }
      .hex-fill { fill: var(--amber-50); stroke: var(--amber); stroke-width: 4; }
    ]]></style>

    <marker id="arrow" viewBox="0 0 10 10" refX="8" refY="5" markerWidth="8" markerHeight="8" orient="auto-start-reverse">
      <path d="M 0 0 L 10 5 L 0 10 z" fill="#FFC107"/>
    </marker>
    <marker id="arrowSmall" viewBox="0 0 10 10" refX="8" refY="5" markerWidth="6" markerHeight="6" orient="auto-start-reverse">
      <path d="M 0 0 L 10 5 L 0 10 z" fill="#FFC107"/>
    </marker>

    <g id="logo-hex">
      <polygon class="hex-stroke" points="0,-34 29,-17 29,17 0,34 -29,17 -29,-17"/>
      <polygon class="hex-fill" points="0,-18 15,-9 15,9 0,18 -15,9 -15,-9"/>
    </g>

    <filter id="softShadow" x="-20%" y="-20%" width="140%" height="140%">
      <feGaussianBlur in="SourceAlpha" stdDeviation="3" result="shadow"/>
      <feOffset dx="0" dy="2" in="shadow" result="offset"/>
      <feColorMatrix in="offset" type="matrix"
        values="0 0 0 0 0
                0 0 0 0 0
                0 0 0 0 0
                0 0 0 0.25 0" result="shadowColor"/>
      <feBlend in="SourceGraphic" in2="shadowColor" mode="normal"/>
    </filter>
  </defs>

  <!-- Background grid -->
  <g class="grid">
    <rect x="0" y="0" width="1280" height="760" fill="white"/>
    <g id="vlines"/>
    <g id="hlines"/>
  </g>

  <script type="application/ecmascript"><![CDATA[
    const step = 40;
    const w = 1280, h = 760;
    const v = document.getElementById('vlines');
    const vh = document.getElementById('hlines');
    for (let x = 0; x <= w; x += step) {
      const ln = document.createElementNS('http://www.w3.org/2000/svg','line');
      ln.setAttribute('x1', x); ln.setAttribute('y1', 0);
      ln.setAttribute('x2', x); ln.setAttribute('y2', h);
      ln.setAttribute('class','grid line');
      v.appendChild(ln);
    }
    for (let y = 0; y <= h; y += step) {
      const ln = document.createElementNS('http://www.w3.org/2000/svg','line');
      ln.setAttribute('x1', 0); ln.setAttribute('y1', y);
      ln.setAttribute('x2', w); ln.setAttribute('y2', y);
      ln.setAttribute('class','grid line');
      vh.appendChild(ln);
    }
  ]]></script>

  <!-- Header / Logo -->
  <g transform="translate(60,64)">
    <use href="#logo-hex" transform="translate(0,0) scale(1)"/>
    <text x="60" y="-6" class="title">PocketHive</text>
    <rect x="60" y="14" width="280" height="28" class="badge"/>
    <text x="74" y="33" class="tag">portable transaction · swarm</text>
  </g>

  <!-- Nodes -->
  <g id="gen" transform="translate(80,260)" filter="url(#softShadow)">
    <rect class="node" x="0" y="0" width="220" height="110"/>
    <text class="node-title" x="20" y="38">Generator</text>
    <text class="sub" x="20" y="66">• creates events / payloads</text>
    <text class="sub" x="20" y="86">• adjustable rate</text>
  </g>

  <g id="q1" transform="translate(340,260)" filter="url(#softShadow)">
    <rect class="node" x="0" y="0" width="200" height="110"/>
    <text class="node-title" x="20" y="38">Queue</text>
    <text class="sub" x="20" y="66">• durable FIFO</text>
    <text class="sub" x="20" y="86">• retries / DLQ</text>
  </g>

  <g id="mod" transform="translate(580,260)" filter="url(#softShadow)">
    <rect class="node" x="0" y="0" width="240" height="110"/>
    <text class="node-title" x="20" y="38">Moderator</text>
    <text class="sub" x="20" y="66">• validation / limits / rules</text>
    <text class="sub" x="20" y="86">• tagging / audit</text>
  </g>

  <g id="q2" transform="translate(880,260)" filter="url(#softShadow)">
    <rect class="node" x="0" y="0" width="200" height="110"/>
    <text class="node-title" x="20" y="38">Queue</text>
    <text class="sub" x="20" y="66">• stage isolation</text>
    <text class="sub" x="20" y="86">• backpressure</text>
  </g>

  <g id="proc" transform="translate(460,470)" filter="url(#softShadow)">
    <rect class="node" x="0" y="0" width="240" height="110"/>
    <text class="node-title" x="20" y="38">Processor</text>
    <text class="sub" x="20" y="66">• execution / scoring</text>
    <text class="sub" x="20" y="86">• side effects / outputs</text>
  </g>

  <g id="post" transform="translate(760,470)" filter="url(#softShadow)">
    <rect class="node" x="0" y="0" width="260" height="110"/>
    <text class="node-title" x="20" y="38">PostProcessor</text>
    <text class="sub" x="20" y="66">• metrics / telemetry</text>
    <text class="sub" x="20" y="86">• logs / export / archival</text>
  </g>

  <g id="test" transform="translate(1060,470)" filter="url(#softShadow)">
    <rect class="node" x="0" y="0" width="200" height="110"/>
    <text class="node-title" x="20" y="38">Test Environment</text>
    <text class="sub" x="20" y="66">• A/B / sandbox</text>
    <text class="sub" x="20" y="86">• simulations / replays</text>
  </g>

  <!-- Arrows -->
  <g stroke-linecap="round">
    <path class="arrow" marker-end="url(#arrow)"
      d="M 300 315 L 340 315"/>
    <path class="arrow" marker-end="url(#arrow)"
      d="M 540 315 L 580 315"/>
    <path class="arrow" marker-end="url(#arrow)"
      d="M 820 315 L 880 315"/>
    <path class="arrow" marker-end="url(#arrow)"
      d="M 980 370 C 980 410, 700 420, 580 470"/>
    <!-- Processor -> PostProcessor -->
    <path class="arrow" marker-end="url(#arrow)"
      d="M 700 525 L 760 525"/>
    <!-- Processor ↔ Test Environment (kept for live testing loops) -->
    <path class="arrow dashed" marker-end="url(#arrowSmall)" marker-start="url(#arrowSmall)"
      d="M 700 505 C 870 505, 950 505, 1060 505"/>
  </g>

  <!-- Notes -->
  <g>
    <text class="note" x="88" y="232">[1] input</text>
    <text class="note" x="348" y="232">[2] buffer</text>
    <text class="note" x="588" y="232">[3] policy</text>
    <text class="note" x="888" y="232">[4] isolation</text>
    <text class="note" x="468" y="610">[5] execution</text>
    <text class="note" x="768" y="610">[6] metrics & export</text>
    <text class="note" x="1068" y="610">[7] validation</text>
  </g>
</svg>
