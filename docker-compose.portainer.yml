version: '3.8'

# Minimal PocketHive stack for Portainer deployment
# Orchestrator will dynamically create bee containers (swarms)

services:
  rabbitmq:
    image: ghcr.io/sepa79/pockethive/rabbitmq:latest
    ports:
      - "5672:5672"
    healthcheck:
      test: ["CMD-SHELL", "nc -z 127.0.0.1 5672"]
      interval: 5s
      timeout: 10s
      retries: 24
      start_period: 30s

  loki:
    image: grafana/loki:2.9.1
    command: -config.file=/etc/loki/config.yml
    volumes:
      - /opt/pockethive/loki/config.yml:/etc/loki/config.yml:ro
      - loki-data:/loki

  log-aggregator:
    image: ghcr.io/sepa79/pockethive/log-aggregator:latest
    environment:
      RABBITMQ_HOST: rabbitmq
      POCKETHIVE_LOGS_EXCHANGE: ph.logs
      POCKETHIVE_LOGS_QUEUE: ph.logs.agg
      POCKETHIVE_LOKI_URL: http://loki:3100
    depends_on:
      - rabbitmq
      - loki
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8080/actuator/health | grep -q UP"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 4m

  scenario-manager:
    image: ghcr.io/sepa79/pockethive/scenario-manager:latest
    environment:
      RABBITMQ_HOST: rabbitmq
      POCKETHIVE_LOGS_QUEUE: ph.logs.agg
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8080/actuator/health | grep -q UP"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 30s
    depends_on:
      - log-aggregator

  orchestrator:
    image: ghcr.io/sepa79/pockethive/orchestrator:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - rabbitmq
      - log-aggregator

  ui:
    image: ghcr.io/sepa79/pockethive/ui:latest
    depends_on:
      - scenario-manager
    ports:
      - "8088:80"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1/healthz | grep -q ok"]
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 5s

  prometheus:
    image: prom/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - /opt/pockethive/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus

  grafana:
    image: grafana/grafana
    environment:
      GF_SECURITY_ADMIN_USER: pockethive
      GF_SECURITY_ADMIN_PASSWORD: pockethive
      GF_SERVER_ROOT_URL: http://localhost:8088/grafana/
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
    volumes:
      - /opt/pockethive/grafana/provisioning:/etc/grafana/provisioning:ro
      - /opt/pockethive/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
      - loki

  pushgateway:
    image: prom/pushgateway:v1.9.0
    ports:
      - "9091:9091"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://127.0.0.1:9091/-/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  wiremock:
    image: wiremock/wiremock:3.13.1
    command:
      - "--verbose"
      - "--disable-banner"
      - "--async-response-enabled"
      - "--global-response-templating"
      - "--max-request-journal-entries=1000"
      - "--enable-stub-cors"
    ports:
      - "8080:8080"
    volumes:
      - /opt/pockethive/wiremock/mappings:/home/wiremock/mappings:ro
      - /opt/pockethive/wiremock/__files:/home/wiremock/__files:ro

volumes:
  loki-data:
  prometheus-data:
  grafana-data:
  wiremock-data:
