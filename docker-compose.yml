version: "3.9"
services:
  rabbitmq:
    build:
      context: .
      dockerfile: Dockerfile.rabbit
    environment: {}
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15674:15674"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 5s
      timeout: 10s
      retries: 12
      start_period: 5s

  generator:
    build:
      context: .
      dockerfile: generator-service/Dockerfile
    environment:
      RABBITMQ_HOST: rabbitmq
      PH_TRAFFIC_EXCHANGE: ph.hive
      PH_GEN_QUEUE: ph.gen
      PH_MOD_QUEUE: ph.mod
      PH_CONTROL_QUEUE: ph.control
    depends_on:
      log-aggregator:
        condition: service_started

  moderator:
    build:
      context: .
      dockerfile: moderator-service/Dockerfile
    environment:
      RABBITMQ_HOST: rabbitmq
      PH_TRAFFIC_EXCHANGE: ph.hive
      PH_GEN_QUEUE: ph.gen
      PH_MOD_QUEUE: ph.mod
      PH_CONTROL_QUEUE: ph.control
    depends_on:
      log-aggregator:
        condition: service_started

  processor:
    build:
      context: .
      dockerfile: processor-service/Dockerfile
    environment:
      RABBITMQ_HOST: rabbitmq
      PH_TRAFFIC_EXCHANGE: ph.hive
      PH_GEN_QUEUE: ph.gen
      PH_MOD_QUEUE: ph.mod
      PH_CONTROL_QUEUE: ph.control
    depends_on:
      log-aggregator:
        condition: service_started

  postprocessor:
    build:
      context: .
      dockerfile: postprocessor-service/Dockerfile
    environment:
      RABBITMQ_HOST: rabbitmq
      PH_TRAFFIC_EXCHANGE: ph.hive
      PH_FINAL_QUEUE: ph.final
      PH_CONTROL_QUEUE: ph.control
    depends_on:
      log-aggregator:
        condition: service_started

  trigger:
    build:
      context: .
      dockerfile: trigger-service/Dockerfile
    environment:
      RABBITMQ_HOST: rabbitmq
      PH_TRAFFIC_EXCHANGE: ph.hive
      PH_GEN_QUEUE: ph.gen
      PH_MOD_QUEUE: ph.mod
      PH_FINAL_QUEUE: ph.final
      PH_CONTROL_QUEUE: ph.control
    depends_on:
      log-aggregator:
        condition: service_started

  log-aggregator:
    build:
      context: .
      dockerfile: log-aggregator-service/Dockerfile
    environment:
      RABBITMQ_HOST: rabbitmq
      PH_LOGS_EXCHANGE: logs.exchange
      PH_LOGS_QUEUE: logs.agg
      PH_LOKI_URL: http://loki:3100
    depends_on:
      rabbitmq:
        condition: service_healthy
      loki:
        condition: service_started

  ui:
    build:
      context: .
      dockerfile: ui/Dockerfile
    ports:
      - "8088:80"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1/healthz | grep -q ok"]
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 5s

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    depends_on:
      - postprocessor

  grafana:
    image: grafana/grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - loki

  loki:
    image: grafana/loki:2.9.1
    command: -config.file=/etc/loki/config.yml
    ports:
      - "3100:3100"
    volumes:
      - ./loki/config.yml:/etc/loki/config.yml:ro

  wiremock:
    image: wiremock/wiremock:3.13.1
    command:
      [
        "--verbose",                     # useful logs for debugging
        "--disable-banner",              # cleaner output
        "--async-response-enabled",      # enable async responses (better throughput)
        "--global-response-templating",  # allows templating across all stubs
        "--record-mappings",             # auto-record mappings (if needed for tests)
        # "--no-request-journal",          # disable detailed journaling for perf (optional, see note below)
        "--max-request-journal-entries=1000", # avoid memory blowup, keep it reasonable
        "--enable-cors",                  # allow cross-origin admin access
      ]
    environment:
      JAVA_OPTS: >-
        -XX:+UseG1GC
        -XX:+ParallelRefProcEnabled
        -XX:MaxRAMPercentage=75
        -XX:+HeapDumpOnOutOfMemoryError
        -Djava.net.preferIPv4Stack=true
        -Djava.awt.headless=true
    ports:
      - "8080:8080"
    volumes:
      - ./wiremock/mappings:/home/wiremock/mappings
      - ./wiremock/__files:/home/wiremock/__files

  promtail:
    image: grafana/promtail:2.9.1
    command: -config.file=/etc/promtail/config.yml
    ports:
      - "9080:9080"
    volumes:
      - ./promtail/config.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - loki
