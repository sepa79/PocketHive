{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://pockethive.dev/contracts/capabilities/manifest.schema.json",
  "title": "PocketHive Worker Capabilities Manifest",
  "description": "Canonical schema for describing a worker's capabilities so authoring tools and backends share the same contract.",
  "$comment": "schemaVersion=1.0.0",
  "type": "object",
  "additionalProperties": false,
  "required": [
    "schemaVersion",
    "capabilitiesVersion",
    "role",
    "config",
    "actions"
  ],
  "properties": {
    "schemaVersion": {
      "description": "Version of this schema file. Bump when the manifest shape changes in a breaking way.",
      "type": "string",
      "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-[0-9A-Za-z.-]+)?$"
    },
    "capabilitiesVersion": {
      "description": "Version of the worker's own capabilities payload. Bump when fields, actions, or panels change.",
      "type": "string",
      "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-[0-9A-Za-z.-]+)?$"
    },
    "role": {
      "description": "Canonical role name for the worker emitting this manifest.",
      "type": "string",
      "enum": [
        "generator",
        "trigger",
        "moderator",
        "processor",
        "postprocessor",
        "swarm-controller",
        "orchestrator",
        "scenario-manager"
      ]
    },
    "displayName": {
      "description": "Human readable name to surface in catalogues and UI pickers.",
      "$ref": "#/$defs/nonEmptyString"
    },
    "summary": {
      "description": "Short description of the worker that may be displayed in UI cards.",
      "$ref": "#/$defs/markdown"
    },
    "metadata": {
      "description": "Arbitrary metadata about the worker build or provenance (image digests, git refs, etc.).",
      "type": "object",
      "additionalProperties": {
        "type": ["string", "number", "boolean"]
      }
    },
    "config": {
      "description": "Declarative configuration fields supported by this worker.",
      "$ref": "#/$defs/configFieldList"
    },
    "actions": {
      "description": "Operations that can be invoked against this worker.",
      "$ref": "#/$defs/actionList"
    },
    "panels": {
      "description": "Optional rich panels rendered by specialised UI modules.",
      "$ref": "#/$defs/panelList"
    }
  },
  "$defs": {
    "nonEmptyString": {
      "type": "string",
      "minLength": 1
    },
    "markdown": {
      "type": "string",
      "description": "Markdown or plaintext intended for human consumption."
    },
    "identifier": {
      "type": "string",
      "pattern": "^[a-z][a-z0-9]*(?:[._-][a-z0-9]+)*$",
      "description": "Lowercase, kebab/underscore/period separated identifier safe for use in URLs and configuration keys."
    },
    "httpMethod": {
      "type": "string",
      "enum": ["GET", "HEAD", "POST", "PUT", "PATCH", "DELETE"]
    },
    "option": {
      "type": "object",
      "additionalProperties": false,
      "required": ["value"],
      "properties": {
        "value": {
          "description": "Literal value supplied to the worker when this option is chosen.",
          "type": ["string", "number", "integer", "boolean"]
        },
        "label": {
          "description": "Human readable text for the option.",
          "$ref": "#/$defs/nonEmptyString"
        },
        "description": {
          "description": "Optional helper text for the option.",
          "$ref": "#/$defs/markdown"
        }
      }
    },
    "options": {
      "type": "array",
      "items": {
        "$ref": "#/$defs/option"
      },
      "uniqueItems": true
    },
    "validationRules": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "minLength": {
          "type": "integer",
          "minimum": 0
        },
        "maxLength": {
          "type": "integer",
          "minimum": 0
        },
        "pattern": {
          "type": "string",
          "description": "JavaScript compatible regular expression (without delimiters)."
        },
        "format": {
          "type": "string",
          "description": "RFC 3339 style or JSON Schema format annotation (e.g. email, uri, hostname)."
        },
        "minimum": {
          "type": "number"
        },
        "maximum": {
          "type": "number"
        },
        "exclusiveMinimum": {
          "type": "number"
        },
        "exclusiveMaximum": {
          "type": "number"
        },
        "minItems": {
          "type": "integer",
          "minimum": 0
        },
        "maxItems": {
          "type": "integer",
          "minimum": 0
        },
        "enum": {
          "type": "array",
          "items": {}
        }
      }
    },
    "uiHints": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "component": {
          "description": "Explicit UI component override (e.g., slider, code-editor).",
          "$ref": "#/$defs/identifier"
        },
        "placeholder": {
          "description": "Placeholder text for inputs.",
          "type": "string"
        },
        "multiline": {
          "description": "Request a multi-line editor.",
          "type": "boolean"
        },
        "monospace": {
          "description": "Hint to render the field using a monospace font.",
          "type": "boolean"
        },
        "secret": {
          "description": "Hint that the field contains sensitive data and should be masked.",
          "type": "boolean"
        },
        "group": {
          "description": "Name of the logical UI group/section where the field should appear.",
          "$ref": "#/$defs/identifier"
        },
        "order": {
          "description": "Optional display ordering hint (lower numbers render first).",
          "type": "number"
        }
      }
    },
    "configField": {
      "type": "object",
      "additionalProperties": false,
      "required": ["name", "type"],
      "properties": {
        "name": {
          "$ref": "#/$defs/identifier"
        },
        "label": {
          "$ref": "#/$defs/nonEmptyString"
        },
        "description": {
          "$ref": "#/$defs/markdown"
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "text",
            "integer",
            "number",
            "boolean",
            "enum",
            "select",
            "multiselect",
            "object",
            "array",
            "duration",
            "cron",
            "json"
          ]
        },
        "default": {},
        "required": {
          "type": "boolean",
          "default": false
        },
        "mutable": {
          "type": "boolean",
          "default": true
        },
        "sensitive": {
          "type": "boolean",
          "default": false
        },
        "repeats": {
          "description": "Indicates that multiple values are allowed for this field.",
          "type": "boolean"
        },
        "options": {
          "$ref": "#/$defs/options"
        },
        "validation": {
          "$ref": "#/$defs/validationRules"
        },
        "ui": {
          "$ref": "#/$defs/uiHints"
        }
      }
    },
    "configFieldList": {
      "type": "array",
      "items": {
        "$ref": "#/$defs/configField"
      },
      "default": [],
      "uniqueItems": true
    },
    "actionParameter": {
      "type": "object",
      "additionalProperties": false,
      "required": ["name", "type"],
      "properties": {
        "name": {
          "$ref": "#/$defs/identifier"
        },
        "label": {
          "$ref": "#/$defs/nonEmptyString"
        },
        "description": {
          "$ref": "#/$defs/markdown"
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "text",
            "integer",
            "number",
            "boolean",
            "enum",
            "json"
          ]
        },
        "required": {
          "type": "boolean",
          "default": false
        },
        "validation": {
          "$ref": "#/$defs/validationRules"
        }
      }
    },
    "actionParameterList": {
      "type": "array",
      "items": {
        "$ref": "#/$defs/actionParameter"
      },
      "default": [],
      "uniqueItems": true
    },
    "action": {
      "type": "object",
      "additionalProperties": false,
      "required": ["id", "label", "method", "endpoint"],
      "properties": {
        "id": {
          "$ref": "#/$defs/identifier"
        },
        "label": {
          "$ref": "#/$defs/nonEmptyString"
        },
        "description": {
          "$ref": "#/$defs/markdown"
        },
        "method": {
          "$ref": "#/$defs/httpMethod"
        },
        "endpoint": {
          "description": "Relative API endpoint exposed by the worker.",
          "type": "string",
          "pattern": "^/"
        },
        "params": {
          "$ref": "#/$defs/actionParameterList"
        },
        "timeoutSeconds": {
          "description": "Suggested timeout for the action in seconds.",
          "type": "number",
          "minimum": 0
        }
      }
    },
    "actionList": {
      "type": "array",
      "items": {
        "$ref": "#/$defs/action"
      },
      "default": [],
      "uniqueItems": true
    },
    "panel": {
      "type": "object",
      "additionalProperties": false,
      "required": ["type"],
      "properties": {
        "type": {
          "$ref": "#/$defs/identifier"
        },
        "label": {
          "$ref": "#/$defs/nonEmptyString"
        },
        "description": {
          "$ref": "#/$defs/markdown"
        },
        "config": {
          "$ref": "#/$defs/configFieldList"
        },
        "source": {
          "description": "Optional endpoint or topic powering this panel.",
          "type": "string"
        },
        "refreshIntervalSeconds": {
          "description": "Suggested polling interval in seconds for dynamic panels.",
          "type": "integer",
          "minimum": 5
        }
      }
    },
    "panelList": {
      "type": "array",
      "items": {
        "$ref": "#/$defs/panel"
      },
      "default": [],
      "uniqueItems": true
    }
  },
  "examples": [
    {
      "schemaVersion": "1.0.0",
      "capabilitiesVersion": "2.1.0",
      "role": "generator",
      "displayName": "Example Load Generator",
      "summary": "Produces synthetic events for integration testing.",
      "config": [
        {
          "name": "target-url",
          "label": "Target URL",
          "type": "string",
          "required": true,
          "validation": {
            "format": "uri"
          }
        }
      ],
      "actions": [
        {
          "id": "trigger-sample",
          "label": "Trigger sample",
          "method": "POST",
          "endpoint": "/actions/trigger",
          "params": [
            {
              "name": "sample-size",
              "label": "Sample size",
              "type": "integer"
            }
          ]
        }
      ],
      "panels": [
        {
          "type": "wiremockMetrics",
          "label": "WireMock metrics"
        }
      ]
    }
  ]
}
